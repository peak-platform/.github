name: Deploy
on:
  workflow_call:
    inputs:
      stage:
        description: Stage to redeploy (default latest)
        required: true
        type: string
        default: latest

# Block multiple deployments to the same stage at the same stage
concurrency: ${{ github.event.inputs.stage }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      NAMESPACE: ${{ github.event.repository.name }}-${{ github.event.inputs.stage }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          ref: main
          fetch-depth: 0

      - name: Map stage to account environment variables
        uses: kanga333/variable-mapper@v0.2.2
        with:
          key: ${{ github.event.inputs.stage }}
          map: |
            {
              "latest|test": {
                "TARGET_ACC_AWS_ID": "${{ secrets.AWS_ACCESS_KEY_ID_DEV }}",
                "TARGET_ACC_AWS_SECRET": "${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}",
                "REGION": "eu-west-1"
              },
              "beta|prod": {
                "TARGET_ACC_AWS_ID": "${{ secrets.AWS_ACCESS_KEY_ID_PROD }}",
                "TARGET_ACC_AWS_SECRET": "${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}",
                "REGION": "eu-west-1"
              },
              "parvati": {
                "TARGET_ACC_AWS_ID": "${{ secrets.AWS_ACCESS_KEY_ID_PARVATI }}",
                "TARGET_ACC_AWS_SECRET": "${{ secrets.AWS_SECRET_ACCESS_KEY_PARVATI }}",
                "REGION": "ap-south-1"
              }
            }

      - name: Get all remote git branches
        run: |
          git checkout -b temp
          git branch -r | grep -v '\->' | while read remote; do git branch --track -f "${remote#origin/}" "$remote"; done
          git checkout main

      - name: Authenticate with Github CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" > auth_token.txt
          gh auth login --with-token < auth_token.txt

      - name: Get workflow ID
        run: |
          echo "WORKFLOW_ID=`gh api -X GET '/repos/peak-platform/${{ github.event.repository.name }}/actions/workflows' | jq '.workflows | .[] | select(.name=="Update Environments") | .id'`" >> $GITHUB_ENV

      - name: Get run ID
        run: |
          echo "RUN_ID=`gh api -X GET '/repos/peak-platform/${{ github.event.repository.name }}/actions/workflows/${{ env.WORKFLOW_ID }}/runs' | jq '[ .workflow_runs | .[] | select(.status=="completed" and .conclusion=="success") ] | .[0].id'`" >> $GITHUB_ENV

      - name: Get environment mappings
        run: |
          gh run download ${{ env.RUN_ID }}

      - name: Get current environment mappings git ref
        run: |
          echo "ENVIRONMENT_GIT_REF=`cat environment-mappings/mappings.json | jq .${{ github.event.inputs.stage }}`" >> $GITHUB_ENV
          cat environment-mappings/mappings.json

      - name: Get current commit ID
        run: |
          export CURRENT_COMMIT_ID=`git rev-parse ${{ env.ENVIRONMENT_GIT_REF }}`
          echo "CURRENT_COMMIT_ID=$CURRENT_COMMIT_ID" >> $GITHUB_ENV
          echo "Deploying commit $CURRENT_COMMIT_ID to ${{ github.event.inputs.stage }}"

      - name: Configure AWS Credentials for tooling account
        uses: aws-actions/configure-aws-credentials@v1.5.8
        with:
          aws-access-key-id: ${{ secrets.TOOLING_ACC_AWS_ID }}
          aws-secret-access-key: ${{ secrets.TOOLING_ACC_AWS_SECRET }}
          aws-region: "eu-west-1"

      - name: Copy artifacts from S3
        run: |
          aws s3 cp \
          s3://peak-deployment-artifacts/${{ github.event.repository.name }}/${{ env.CURRENT_COMMIT_ID }}/artifacts \
          ./artifacts --recursive --sse

      - name: Load top level parameters from parameters.json
        id: load-root-params
        uses: zoexx/github-action-json-file-properties@1.0.1
        with:
          file_path: "artifacts/parameters.json"
          prop_path: "params"

      - name: Load stage parameters from parameters.json
        id: load-stage-params
        uses: zoexx/github-action-json-file-properties@1.0.1
        with:
          file_path: "artifacts/parameters.json"
          prop_path: "stages.${{ github.event.inputs.stage }}"

      - name: Export parameters to environment variables
        run: |
          echo "BASE_PATH=${{ steps.load-root-params.outputs.basepath }}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${{ steps.load-stage-params.outputs.clusterName }}" >> $GITHUB_ENV
          echo "HOSTED_ZONE_ID=${{ steps.load-stage-params.outputs.hostedZoneId }}" >> $GITHUB_ENV
          echo "ROOT_DOMAIN_NAME=${{ steps.load-stage-params.outputs.rootDomainName }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials for target account
        uses: aws-actions/configure-aws-credentials@v1.5.8
        with:
          aws-access-key-id: ${{ env.TARGET_ACC_AWS_ID }}
          aws-secret-access-key: ${{ env.TARGET_ACC_AWS_SECRET }}
          aws-region: ${{ env.REGION }}

      - name: Export Kafka brokers to environment variables
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: "service-events-${{ github.event.inputs.stage }}-kafka-config"
          env_variable_name: "KAFKA_CONFIG"

      - name: Deploy stack
        run: |
          aws cloudformation deploy \
          --template-file artifacts/stage.yml \
          --stack-name ${{ github.event.repository.name }}-${{ github.event.inputs.stage }} \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides Stage=${{ github.event.inputs.stage }} RootDomainName=${{ env.ROOT_DOMAIN_NAME }} HostedZoneId=${{ env.HOSTED_ZONE_ID }} BasePath=${{ env.BASE_PATH }} \
          --tags service=${{ github.event.repository.name }} feature=${{ github.event.repository.name }} tenant=platform stage=${{ github.event.inputs.stage }} \
          source=https://github.com/peak-platform/${{ github.event.repository.name }}/blob/main/infrastructure/cloudformation/stage.yml VantaOwner=atul.sharma@peak.ai VantaDescription=PeakAI-Infrastructure VantaNonProd=${{ (github.event.inputs.stage == 'prod' || github.event.inputs.stage == 'parvati') && 'false' || 'true' }}

      - name: Export security groupIds to environment variables
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: "/${{ github.event.inputs.stage }}-platform-services-sg/newk8svpc"
          env_variable_name: "COMMON_SECURITY_GROUP"

      - name: Deploy helm chart
        run: |
          aws ssm send-command \
           --document-name kubectl-command \
           --targets "Key=tag:Name,Values=kubectl-proxy" \
           --parameters '{"Repo":["${{ github.event.repository.name }}"],"HelmChartBranch":["main"],"Command":["cd infrastructure/helm-charts/overrides && helm upgrade ${{ github.event.repository.name }} peak-helm-charts/microservice-with-istio --wait --atomic --version 0.0.7 --install -f ./default.yml -f ./${{ github.event.inputs.stage }}.yml --set \\\"global.securityGroupPolicy.securityGroupIds={${{ env.COMMON_SECURITY_GROUP }}}\\\" --set \\\"microservice.stacks.main.image.repository=088564592310.dkr.ecr.eu-west-1.amazonaws.com/${{ github.event.repository.name }}\\\" --set \\\"microservice.stacks.main.image.tag=${{ env.CURRENT_COMMIT_ID }}\\\" --set \\\"microservice.stacks.main.env[2].value=${{ env.KAFKA_CONFIG }}\\\" -n ${{ env.NAMESPACE }} --create-namespace && kubectl label namespace ${{ env.NAMESPACE }} istio-injection=enabled"],"Cluster":["${{ env.CLUSTER_NAME }}"],"GitRef":["${{ env.CURRENT_COMMIT_ID }}"]}'

  post_deploy:
    name: Post deploy
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Post deployment tests
        run: |
          echo "Post deployment tests"
