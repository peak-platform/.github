name: Build
on:
  workflow_call:
    inputs:
      ref:
        description: Build ref to map to stage (default main)
        required: true
        type: string
        default: main

# Block multiple builds from the same commit running at the same time
# concurrency: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}

      - name: Use Node.js LTS
        uses: actions/setup-node@v2
        with:
          node-version: lts/*
          registry-url: "https://registry.npmjs.org"

      - name: Get node modules cache
        uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-lts-install_dependencies-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-lts-install_dependencies-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Yarn lint
        run: yarn lint

      - name: Start database container
        run: docker compose up db -d

      - name: Yarn test
        run: yarn test --runInBand

      - name: Stop database container
        if: always()
        run: docker compose down

  build:
    runs-on: ubuntu-latest
    env:
      REGION: eu-west-1
      NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}

      - name: Get current commit ID
        run: echo "CURRENT_COMMIT_ID=`git rev-parse ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}`" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.5.8
        with:
          aws-access-key-id: ${{ secrets.TOOLING_ACC_AWS_ID }}
          aws-secret-access-key: ${{ secrets.TOOLING_ACC_AWS_SECRET }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Use Node.js LTS
        uses: actions/setup-node@v2
        with:
          node-version: lts/*
          registry-url: "https://registry.npmjs.org"

      - name: Get node modules cache
        uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-lts-install_dependencies-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-lts-install_dependencies-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Build project
        run: yarn build

      - name: Copy files to artifacts
        run: |
          mkdir artifacts
          cp .github/workflows/parameters.json artifacts
          cp -R dist artifacts

      - name: Validate Template
        run: aws cloudformation validate-template --template-body file://infrastructure/cloudformation/stage.yml

      - name: Package CloudFormation
        run: |
          aws cloudformation package \
          --template-file infrastructure/cloudformation/stage.yml \
          --output-template-file artifacts/stage.yml \
          --s3-bucket peak-deployment-artifacts \
          --s3-prefix ${{ github.event.repository.name }}/${{ env.CURRENT_COMMIT_ID }}/cloudformation-package

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v2
        with:
          push: true
          file: Dockerfile
          context: .
          tags: 088564592310.dkr.ecr.eu-west-1.amazonaws.com/${{ github.event.repository.name }}:${{ github.sha }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Copy artifacts to S3
        run: |
          aws s3 cp ./artifacts \
          s3://peak-deployment-artifacts/${{ github.event.repository.name }}/${{ env.CURRENT_COMMIT_ID }}/artifacts \
          --recursive --sse

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts-${{ env.CURRENT_COMMIT_ID }}
          path: ./artifacts

  # Checks if the built git ref matches environment mappings and triggers deploy pipeline as needed
  trigger_deployments:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}
          fetch-depth: 0

      - name: Get environment mappings
        uses: dawidd6/action-download-artifact@v2.14.1
        with:
          name: environment-mappings
          path: ./
          workflow: update-environments.yml
          workflow_conclusion: success

      - name: Convert mappings to env variables
        run: |
          echo "LATEST_ENVIRONMENT_REF=`cat mappings.json | jq '.latest'`" >> $GITHUB_ENV
          echo "TEST_ENVIRONMENT_REF=`cat mappings.json | jq '.test'`" >> $GITHUB_ENV
          echo "BETA_ENVIRONMENT_REF=`cat mappings.json | jq '.beta'`" >> $GITHUB_ENV
          echo "PROD_ENVIRONMENT_REF=`cat mappings.json | jq '.prod'`" >> $GITHUB_ENV
          echo "PARVATI_ENVIRONMENT_REF=`cat mappings.json | jq '.parvati'`" >> $GITHUB_ENV

      - name: Get all remote git branches
        run: |
          git checkout -b temp
          git branch -r | grep -v '\->' | while read remote; do git branch --track -f "${remote#origin/}" "$remote"; done
          git checkout main

      - name: Convert refs to commit IDs
        run: |
          echo "CURRENT_COMMIT_ID=`git rev-parse ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}`" >> $GITHUB_ENV
          echo "LATEST_ENVIRONMENT_COMMIT_ID=`git rev-parse ${{ env.LATEST_ENVIRONMENT_REF }}`" >> $GITHUB_ENV
          echo "TEST_ENVIRONMENT_COMMIT_ID=`git rev-parse ${{ env.TEST_ENVIRONMENT_REF }}`" >> $GITHUB_ENV
          echo "BETA_ENVIRONMENT_COMMIT_ID=`git rev-parse ${{ env.BETA_ENVIRONMENT_REF }}`" >> $GITHUB_ENV
          echo "PROD_ENVIRONMENT_COMMIT_ID=`git rev-parse ${{ env.PROD_ENVIRONMENT_REF }}`" >> $GITHUB_ENV
          echo "PARVATI_ENVIRONMENT_COMMIT_ID=`git rev-parse ${{ env.PARVATI_ENVIRONMENT_REF }}`" >> $GITHUB_ENV

      - name: Log commit IDs
        run: |
          echo "Current commit: $CURRENT_COMMIT_ID"
          echo "Latest environment currently pointing at commit: $LATEST_ENVIRONMENT_COMMIT_ID"
          echo "Test environment currently pointing at commit: $TEST_ENVIRONMENT_COMMIT_ID"
          echo "Beta environment currently pointing at commit: $BETA_ENVIRONMENT_COMMIT_ID"
          echo "Prod environment currently pointing at commit: $PROD_ENVIRONMENT_COMMIT_ID"
          echo "Parvati environment currently pointing at commit: $PARVATI_ENVIRONMENT_COMMIT_ID"

      - name: Trigger latest deployment
        if: ${{ env.CURRENT_COMMIT_ID == env.LATEST_ENVIRONMENT_COMMIT_ID }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Deploy
          token: ${{ secrets.GIT_TOKEN }}
          inputs: '{ "stage": "latest" }'

      - name: Trigger test deployment
        if: ${{ env.CURRENT_COMMIT_ID == env.TEST_ENVIRONMENT_COMMIT_ID }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Deploy
          token: ${{ secrets.GIT_TOKEN }}
          inputs: '{ "stage": "test" }'

      - name: Trigger beta deployment
        if: ${{ env.CURRENT_COMMIT_ID == env.BETA_ENVIRONMENT_COMMIT_ID }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Deploy
          token: ${{ secrets.GIT_TOKEN }}
          inputs: '{ "stage": "beta" }'
